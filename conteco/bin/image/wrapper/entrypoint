#!/usr/bin/env bash
export CONTECO_IMAGE="$CONTECO_TYPE.$CONTECO_NAME"
export CONTECO_EXECUTIONPLANE_BASEPATH=$PATH

export PATH="/conteco/bin:/conteco/bin/image:/conteco/bin/image/executionplane:${CONTECO_EXECUTIONPLANE_BASEPATH}"
export CONTECO_EXECUTIONPLANE_ORIGINALPATH=$PATH

export PATH="/conteco/bin/image/wrapper:${CONTECO_EXECUTIONPLANE_ORIGINALPATH}"
export CONTECO_EXECUTIONPLANE_WRAPPERPATH=$PATH

# set CONTECO_HOSTNAME
if [[ -f /hostfs/etc/hostname ]]; then
  export CONTECO_HOSTNAME="$(< /hostfs/etc/hostname)"
elif [[ -d /hostfs/etc ]]; then
  export CONTECO_HOSTNAME="host.docker.internal"
fi
if [[ "$CONTECO_HOSTNAME" == "" ]]; then
  export CONTECO_HOSTNAME="localhost"
fi

if [[ $CONTECO_PREENTRYPOINT != "" ]] ; then
  . "$CONTECO_PREENTRYPOINT"
fi

# Register APIs
for f in /conteco/bin/${CONTECO_TYPE}/* ;
do
	folder=$(basename $f)
	if [[ -d $f && "$folder" != "internal" && "$folder" != "image" ]] ; then
    envName="CONTECO_EXECUTIONPLANE_APIEXTERNALPATH_${folder^^}"
    export "$envName"="/conteco/bin/${CONTECO_TYPE}/$folder:${CONTECO_EXECUTIONPLANE_ORIGINALPATH}"
    envName="CONTECO_EXECUTIONPLANE_APIINTERNALPATH_${folder^^}"
    export "$envName"="/conteco/bin/${CONTECO_TYPE}/$folder:/conteco/bin/${CONTECO_TYPE}/$folder/internal:/conteco/bin/${CONTECO_TYPE}/internal:$CONTECO_EXECUTIONPLANE_ORIGINALPATH"
	fi
done;

export CONTECO_EXECUTIONPLANE="${CONTECO_IMAGE}"

if [[ $1 == '--executiontag' ]] ; then
  export CONTECO_EXECUTIONTAG=$2
  shift
  shift
fi

if [[ $1 == "--keepalive"* ]] ; then
  cycles=$(echo "$1" | cut -d':' -f 2)
  export CONTECO_EXITPOINT="KEEPALIVE:$cycles"
  shift
elif [[ $1 == '--nokeepalive' ]] ; then
  export CONTECO_EXITPOINT=
  shift
fi

match='--'
# --base forces entrypoint invocation with arguments - always JSON output
if [[ "$1" == '--base' ]] ; then
  if [[ "$CONTECO_INTERACTIVE" == 'true' ]] ; then
    run-image $@
  else
    ( run-image $@ ) > >( to-JSON "INFO" ) 2> >( to-JSON "ERROR" )
  fi

# --container switch forces JSON output
elif [[ "$1" == '--container' ]] ; then
  shift
  ( run-image $@ ) > >( to-JSON "INFO" ) 2> >( to-JSON "ERROR" )

# --interactive forces text output, required when interactively running processes within a container
elif [[ "$1" == '--interactive' || "$CONTECO_INTERACTIVE" == "true" ]] ; then
  if [[ "$1" == '--interactive' ]] ; then
    shift
  fi
  run-image $@

# double hyphen switches target image wrapper API, unless --base is used first
# default mode is interactive and default output is text
elif [[ "$1" == $match* ]] ; then
  run-image $@

# default mode is JSON output
else
  ( run-image $@ ) > >( to-JSON "INFO" ) 2> >( to-JSON "ERROR" )
fi
